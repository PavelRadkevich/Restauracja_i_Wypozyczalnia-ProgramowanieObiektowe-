Trzeba dodać do RentObjectMananger metodę: GetAllTableInHall (HallPtr, vector<Table>* (vector ma być pusty)), vector<table>\

Sprawdzać przy przypisaniu ID,czy on juz nie istnieje

Na diagramie w konstruktorze klasy Table, trzeba dodać polę objectID

Na diagramie w konstruktorze klasy Peronal, trzeba wszystko zmienić, ten konstruktor taki samy jak w Table

Dodać że metoda GetObjectInfo jest metodą abstrakcyjną, tak samo dodać tą metodę do wszystkich pochodnych klas

Dla wszystkich RentObjectów trzeba dodać pola z nazwami, bo nie ma co pokazywać na ekranie, trzeba wyróźniać nie tylko poprzez ID.

Do klasy Group dodać atrybut Sale, on będzie uwzgdględniony podczas wyliczania ceny

Zmienić getActualPrice na getActualPriceForHour (będzie cena za godzinę, będziemy z niej korzystać przy wyliczeniu rzeczywistej ceny wynajmu)

Zmienić imię klasy Repositories na StorageContainer

Trzeba pomyśleć jak zrobić wszystkie destruktory, i zauważyć że przechowujemy nipotrebne dane w repozytoriach

Trzeba dodać metody getTablePtr i getTableHallPtr one stworzone dla metody getAllTableInHall

Dodać klasy wyjątków, ogólnie one są nieobowiązkowe, ale jak będzie czas zrobimy, bo są bardzo przydatne czasami

GetNames do klasy Client, bardzo ładnie wywodzi

Atrybut rentCost zamienić na double

Tworzymy argument cost dla klasy Rent, dodatkowo jeszcze tworzymy kilka metod, związanych z wyliczeniem i aktualizowaniem ceny

Bool Rented przemieszczmay do RentObject

Przy dodaniu stolika do restauracji, trzba sprawdzać czy ma on przypisany Hall

Atrybut Cost z klasy RentObject, trzeba od razu podczas wynajmu zachować jaką stałą, bo potem możemy coś zmienić w stoliku, a client pod koniec rezerwacji otrzyma inną cenę